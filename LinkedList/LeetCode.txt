// Remove Nth node from back
ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *fast = head;
        ListNode *slow  = head;
        ListNode *newhead;
        for(int i=0;i<n;i++){
            fast = fast->next;
        }
        if(fast==NULL){
            newhead = head->next;
            return newhead;
        }
        while(fast->next!=NULL){
            slow = slow->next;
            fast  = fast->next;
        }
        ListNode *todel = slow->next;
        slow->next = slow->next->next;
        delete todel;
        return head;
        
        
    }



// Merge Two Sorted LinkedList

 ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode *p1 = l1;
        ListNode *p2 = l2;
        ListNode *dummyNode = new ListNode(-1); // dummy head;
        ListNode *p3 = dummyNode;
        while(p1!=NULL && p2!=NULL){
            if(p1->val<= p2->val){
                p3->next = p1;
                p1 = p1->next;
            }
            else{
                p3->next =p2;
                p2= p2->next;
            }
            p3 = p3->next;
        }
        while(p1!=NULL){
            p3->next = p1;
            p1 = p1->next;
            p3 = p3->next;
        }
        while(p2!=NULL){
            p3->next =p2;
            p2= p2->next;
            p3= p3->next;
        }
        
        return dummyNode->next; // new head

// Find element of linked list

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        // two pointer method slow and fast
        ListNode *fast = head;
        ListNode *slow= head;
        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        // fast is always 2 steps fast than slow fast = 2*slow
        // when fast reaches NULL slow reaches middle of list
        return slow;
    }
};

// Flatten Tree to linked list

class Solution {
public:
    void flatten(TreeNode* root) {
        if(root==NULL || (root->left==NULL && root->right==NULL)){
            return;
        }
        if(root->left!=NULL){
            flatten(root->left); // flatten root->left
            TreeNode* temp = root->right; 
            root->right = root->left; // make flattened left as right
            root->left = NULL; // make left = NULL
            TreeNode* t = root->right; // traverse to end of new root->left
            while(t->right!=NULL){
                t = t->right;
            }
            t->right = temp; // assign right of tail to old right
        } 
        flatten(root->right); //flatten old right subtree
    }
};